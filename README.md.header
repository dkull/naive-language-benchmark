# naive-language-benchmark

Comparing naive implementations in compiled languages only. The goal is to compare the optimization capabilities of the compilers behind the languages.
All the benchmarks are written by me in good faith. I don't use any of these languages daily though the amount of code I have written varies a lot.

All the implementations will try to be as similar as possible across all languages. Some testing of different integer types, etc. is done for performance.

Each language will get a custom set of compiler flags - no benchmark specific flags. Flags described in the compilers '--help' are priority and acceptable.
Usually something like '-release -Ofast -flto -march=native' is used. Some A/B testing is done when choosing the subset.

Required compilers in $PATH:
```
	gcc
	clang
	rustc
	go
	gccgo
	nim
	zig
	ldc2
	v
	ponyc  # currently not used
```
And 'screenfetch' (optional for README.md)

NOTE: Some results differ a lot if an older version of GCC/Clang is used. I am always running with latest stable of both, even if it gives worse results.
Otherwise the compiler version may be very different - some are nightlies, some are git master clones, some are stables. But I try to prefer newer usable
versions.

Run for just the benchmark tables:
```
make -s benchmark_table
```

Run to generate this README.md:
```
make -s readme
```

